require 'fastlane/action'
require 'fastlane_core'
require_relative '../helper/qawolf_helper'

module Fastlane
  module Actions
    module SharedValues
      QAWOLF_RUN_INPUT_PATH = :QAWOLF_RUN_INPUT_PATH
    end

    # Casing is important for the action name!
    class UploadToQawolfAction < Action
      SUPPORTED_FILE_EXTENSIONS = ["apk", "ipa", "aab"]

      def self.run(params)
        qawolf_api_key = params[:qawolf_api_key] # Required
        qawolf_base_url = params[:qawolf_base_url]
        file_path = params[:file_path] || default_file_path
        filename = params[:filename]

        validate_file_path(file_path)

        UI.message("🐺 Uploading to QA Wolf...")

        run_input_path = Helper::QawolfHelper.upload_file(qawolf_api_key, qawolf_base_url, file_path, filename)

        ENV["QAWOLF_RUN_INPUT_PATH"] = run_input_path

        UI.success("🐺 Uploaded #{file_path} to QA Wolf successfully. Run input path: #{run_input_path}")
        UI.success("🐺 Setting environment variable QAWOLF_RUN_INPUT_PATH = #{run_input_path}")

        Actions.lane_context[SharedValues::QAWOLF_RUN_INPUT_PATH] = run_input_path
      end

      # Validate file_path.
      def self.validate_file_path(file_path)
        UI.user_error!("file_path must be provided") unless file_path.kind_of?(String) && !file_path.empty?
        UI.user_error!("No file found at '#{file_path}'.") unless File.exist?(file_path)

        # Validate file extension.
        extension = File.extname(file_path).sub(/^\./, '')
        unless SUPPORTED_FILE_EXTENSIONS.include?(extension)
          UI.user_error!("file_path is invalid, only files with extensions #{SUPPORTED_FILE_EXTENSIONS} are allowed to be uploaded.")
        end
      end

      def self.description
        "Fastlane plugin for QA Wolf integration to upload executable artifacts."
      end

      def self.authors
        ["QA Wolf"]
      end

      def self.details
        "Uploads IPA, APK, and AAB files to QA Wolf."
      end

      def self.output
        [
          ['QAWOLF_RUN_INPUT_PATH', 'Uploaded file location for the executable artifact.']
        ]
      end

      def self.default_file_path
        platform = Actions.lane_context[SharedValues::PLATFORM_NAME]

        if platform == :ios
          # Shared value for ipa path if it was generated by gym https://docs.fastlane.tools/actions/gym/.
          return Actions.lane_context[SharedValues::IPA_OUTPUT_PATH]
        else
          # Shared value for apk/aab if it was generated by gradle.
          apk_path = Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
          aab_path = Actions.lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH]

          if apk_path.nil?
            return aab_path
          else
            return apk_path
          end
        end
      end

      def self.available_options
        [
          FastlaneCore::ConfigItem.new(key: :qawolf_api_key,
                                       env_name: "QAWOLF_API_KEY",
                                       description: "Your QA Wolf API key",
                                       optional: false,
                                       type: String),
          FastlaneCore::ConfigItem.new(key: :qawolf_base_url,
                                       env_name: "QAWOLF_BASE_URL",
                                       description: "Your QA Wolf base URL",
                                       optional: true,
                                       type: String),
          FastlaneCore::ConfigItem.new(key: :file_path,
                                       description: "Path to the app file",
                                       optional: true,
                                       type: String),
          FastlaneCore::ConfigItem.new(key: :filename,
                                       description: "Optional uploaded filename to use instead of the original filename",
                                       optional: true,
                                       type: String)
        ]
      end

      def self.is_supported?(platform)
        # Adjust this if your plugin only works for a particular platform (iOS vs. Android, for example)
        # See: https://docs.fastlane.tools/advanced/#control-configuration-by-lane-and-by-platform
        [:ios, :android].include?(platform)
      end

      def self.example_code
        [
          'qawolf',
          'upload_to_qawolf',
          'upload_to_qawolf(
            qawolf_api_key: ENV["QAWOLF_API_KEY"],
            file_path: "/path_to/app.apk",
            filename: "custom_filename.apk"
           )'
        ]
      end
    end
  end
end
